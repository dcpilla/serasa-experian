#!/bin/bash

# /**
# *
# * Este arquivo é parte do projeto Service Catalog Infrastructure Serasa Experian
# *
# * @package        Service Catalog Infrastructure
# * @name           engine.sh
# * @version        2.3.0
# * @description    Script que controla o fluxo de execução com terraform
# * @copyright      2020 &copy Serasa Experian
# *
# * @version        1.0.0
# * @change         - [ADD] Script que controla o fluxo de execução com terraform
# * @author         DevSecOps Architecture Brazil
# * @contribution
# * @dependencies   /usr/local/bin/ansible-playbook
# *                 /usr/local/bin/terraform
# *                 ansible.cfg
# *                 .ansible/vault
# *                 centos-release-scl-rh
# *                 python38-python
# *                 pip
# * @references     https://medium.com/@timhberry/terraform-pipelines-in-gitlab-415b9d842596
# * @date           13-Ago-2021
# **/

set -e

# /**
# * wizCli
# * IAC Policies
# * @var string
# */
wizPolicy='DevSecOpsBR_iac_policy'

#Path Variable
dir=$pwd
#Terraform Binary Path
export ANSIBLE_VAULT_PASSWORD_FILE=~/.ansible/vault
TERRAFORM="/usr/local/bin/terraform"
#Terraform-Inventory Binary Path
TERRAFORM_INVENTORY="/usr/local/bin/terraform-inventory"
ANSIBLE_PLAYBOOK="/usr/local/bin/ansible-playbook"
ANSIBLE_CONFIG="ansible.cfg"
JQ="/usr/local/bin/jq"
#WizCLI PATH
WIZCLI="/usr/local/bin/wizcli"

# /**
# * logMsg
# * Método mensagens
# * @package Service Catalog Infrastructure
# * @author  Joao Paulo Bastos L. <Joao.Leite2@br.experian.com>
# * @parm    string - msg a ser exibida
# *          type   - tipo de msg
# * @return  true | false
# */
logMsg() {
	local msg="$1"
	local type="$2"

	echo "[$type] $(date) - $msg"
}

#/**
#* ValidatePolicy
#* Método para execução do scan do Wiz
#* @package Service Catalog Infrastructure
#* @author  Felipe Moura <felipe.moura@br.experian.com>
#* @return  true | false
#**/
ValidatePolicy() {
	
	logMsg "infra->ValidatePolicy: Coletando AWS Account ID..." "INFO"
	AWSACCOUNTID=$($JQ -r '.variables.aws_account_id.value' tfplan.json)
	
	set +e
	logMsg "infra->ValidatePolicy: Autenticando WizCLI..." "INFO"
	$WIZCLI auth --id $wiz_id --secret $wiz_token
	logMsg "infra->ValidatePolicy: Executando Scan..." "INFO"
	$WIZCLI iac scan --path tfplan.json --tag server=$HOSTNAME --tag env=$cockpit_env --tag automation=$browse_catalog --tag aws_account_id=$AWSACCOUNTID --policy $wizPolicy
	exit_code=$?
	set -e
		
	#switch case for wizcli exit codes (https://docs.wiz.io/wiz-docs/docs/using-wiz-cli#exit-codes)
	case $exit_code in
	0)
		# Passed
		logMsg "infra->ValidatePolicy:  exit code 0. Scan aprovado" "INFO"
		;;
	1)
		# General error (timeout, network interruption, etc.)
		logMsg "infra->ValidatePolicy: exit code 1. Erro Geral. Tentando novamente..." "INFO"
		$WIZCLI iac scan --path tfplan.json --tag server=$HOSTNAME --tag env=$cockpit_env --tag automation=$browse_catalog --tag aws_account_id=$AWSACCOUNTID --policy $wizPolicy
		;;
	2)
		# Invalid command
		logMsg "infra->ValidatePolicy: exit code 2. Comando invalido" "INFO"
		;;
	3)
		# Authentication error
		logMsg "infra->ValidatePolicy: exit code 3. Falha de autenticacao. Verifique as credenciais" "INFO"
		;;
	4)
		# Policy failure
		logMsg "infra->ValidatePolicy: exit code 4. A Infra As Code(IaC) não atende aos requisitos da política $wizPolicy do wiz.io" "INFO"
		;;
	*)
		# Unknown exit code
		logMsg "infra->ValidatePolicy: Exit Code desconhecido: $exit_code" "INFO"
		;;
	esac
	
	logMsg "infra->ValidatePolicy:  WizCLI IaC Scan finalizado" "INFO"
}

case $1 in
vars)
	cd "$dir"
	#call Ansible for Terraform
	$ANSIBLE_PLAYBOOK playbook-01.yml -i spobrcatalog
	;;
up)
	logMsg "Apply Terraform Plan" "INFO"
	cd "$dir"
	#Inicia o Terraform
	$TERRAFORM init
	#Exporta o Plan do Terraform para JSON
	$TERRAFORM plan --out tfplan.binary
	$TERRAFORM show -json tfplan.binary >tfplan.json
	#Invocando WizCLI
	#ValidatePolicy
	#Implementa a Infra Estrutura
	$TERRAFORM apply -auto-approve
	#Efetua o Download do terraform state
	$TERRAFORM show -json >terraform.tfstate
	#Provisionamento da Infra Estrutura
	$TERRAFORM_INVENTORY -inventory >hosts
	#Tratamento para playbook
	chmod +x inventory_fix.sh
	sh inventory_fix.sh
	#call Ansible
	logMsg "Aguardando Inicio da Instancia - 5 Minutos" "INFO"
	sleep 300
	hostip=$($TERRAFORM output -json ipv4_address | $JQ -r '.[]')
	IFS=' ' read -ra hosts <<<$hostip
	retrys=0
	for i in "${hosts[@]}"; do
		while ! ssh -o "StrictHostKeyChecking no" -o BatchMode=yes -i ~/.ssh/id_rsa_ansible -fN ansible@$i >/dev/null 2>&1; do
			logMsg "Instancia ainda nao esta pronta. Tentando novamente em 5 minutos" "INFO"
			retrys=$((retrys + 1))

			if [ $retrys -eq 5 ]; then
				logMsg "Não foi possivel conectar a instância. Verifique a conectividade do EC2 e possíveis regras de firewall para acessar o Catálogo de Serviços." "ERROR"
				exit 1
			fi

			sleep 300
		done
	done
	$ANSIBLE_PLAYBOOK playbook-02.yml -i hosts
	;;
upt)
	logMsg "Apply Terraform Plan" "INFO"
	cd "$dir"
	#Inicia o Terraform
	$TERRAFORM init
	#Exporta o Plan do Terraform para JSON
	$TERRAFORM plan --out tfplan.binary
	$TERRAFORM show -json tfplan.binary >tfplan.json
	#Invocando WizCLI
	#ValidatePolicy
	#Implementa a Infra Estrutura
	$TERRAFORM apply -auto-approve
	;;
upa)
	logMsg "Apply Terraform Plan" "INFO"
	cd "$dir"
	#call Ansible
	logMsg "Aguardando Inicio da Instancia - 5 Minutos" "INFO"
	$ANSIBLE_PLAYBOOK playbook-02.yml -i hosts
	;;
k8s)
	logMsg "Apply Terraform Plan" "INFO"
	cd "$dir"
	#Inicia o Terraform
	$TERRAFORM init
	#Implementa a Infra Estrutura
	$TERRAFORM apply -auto-approve
	#Efetua o Download do terraform state
	$TERRAFORM show -json >terraform.tfstate
	#Provisionamento da Infra Estrutura
	$TERRAFORM_INVENTORY -inventory >hosts
	#Tratamento para playbook
	chmod +x inventory_fix.sh
	./inventory_fix.sh
	#call Ansible
	logMsg "Aguardando Inicio da Instancia - 5 Minutos" "INFO"
	sleep 300
	$ANSIBLE_PLAYBOOK playbook-02.yml -i hosts
	cd ans-shared-roles/kubespray
	$ANSIBLE_PLAYBOOK -i inventory/serasa/hosts.yml --become cluster.yml
	cd -
	$ANSIBLE_PLAYBOOK playbook-k8s-deploy.yml -i hosts
	;;
down)
	logMsg "Destroy Terraform Plan" "INFO"
	cd "$dir"
	$TERRAFORM init
	if ! terraformDestroy=$($TERRAFORM destroy -auto-approve); then
		logMsg "Ocorreu um erro ao destruir a role criada pela automacao, porem nao ha problema. Caso prefira, acesse o console e exclua a role manualmente." "ERROR"
		exit 0
	else
		logMsg "A infraestrutura criada pelo launch foi destruida com sucesso! :)" "INFO"
	fi
	rm -f terraform.tfstate
	rm -f hosts
	;;
*)
	logMsg "Please, Inform  up or down" "WARN"
	;;

esac
