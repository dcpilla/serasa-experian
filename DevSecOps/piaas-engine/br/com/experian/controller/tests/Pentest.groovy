/**
 * setDetailsPentest
 * Método pega detalhes do pentest da aplicação 
 * @version 8.2.0
 * @package DevOps
 * @author  Joao Paulo Bastos L. <Joao.Leite2@br.experian.com>
 * @return  $versionApp
 **/
 def setDetailsPentest() {
    def dataQuery    = ''
    def fileSql      = "/tmp/" + UUID.randomUUID().toString() + ".sql"; 
    def queryPentest = "SET NOCOUNT ON;SELECT '{\"AppID\":\"' + REPLACE(CAST(tblPentest.AppID AS NVARCHAR(MAX)),'\\\','\\\\\') + '\",'+'\"Status\":\"' + REPLACE(CAST(tblPentest.Status  AS NVARCHAR(MAX)),'\\\','\\\\') + '\",'+'\"ManualTestComplianceStatus\":\"' + REPLACE(CAST(tblPentest.ManualTestComplianceStatus  AS NVARCHAR(MAX)),'\\\','\\\\') + '\",'+'\"ManualFinalTestStatus\":\"' + REPLACE(CAST(tblPentest.ManualFinalTestStatus  AS NVARCHAR(MAX)),'\\\','\\\\') + '\",'+'\"ManualStatus\":\"' + REPLACE(CAST(tblPentest.ManualStatus  AS NVARCHAR(MAX)),'\\\','\\\\') + '\",'+'\"ManualRemediationStatus\":\"' + REPLACE(CAST(tblPentest.ManualRemediationStatus  AS NVARCHAR(MAX)),'\\\','\\\\') + '\",'+ +'\"ManualPenTestStatus\":\"' + REPLACE(CAST(tblPentest.ManualPenTestStatus AS NVARCHAR(MAX)),'\\\','\\\\') + '\"}' FROM VULNERABILITY_MANAGEMENT_TESTING.dbo.Metrics_ManualPenTestStatusStage tblPentest WHERE AppID = " + piaasMainInfo.gearr_id + " FOR XML PATH('');"
    def jsonQuery    = '' 

    echo "Invoking function setDetailsPentest"
    
    if ( piaasMainInfo.gearr_u_network_type == "INTERNET" ) { 
        echo "The application network type is " + piaasMainInfo.gearr_u_network_type + ", execution calculated score pentest"
        
        echo "Create file for query of the VMS(10.10.198.92) base pentest in " + fileSql 
        writeFile file: fileSql, text: """---
        ${queryPentest}"""

        echo "Running query in VMS(10.10.198.92)"
        try {
            withCredentials([usernamePassword(credentialsId: 'user_query_vms', passwordVariable: 'pass', usernameVariable: 'user')]) {
                dataQuery = sh(script: "#!/bin/sh -e\n /opt/mssql-tools/bin/sqlcmd -S 10.10.198.92 -U ${user} -P '${pass}' -i $fileSql -h -1", returnStdout: true)
                dataQuery = dataQuery.replaceAll("\r", "").replaceAll("\t", "").replaceAll("\n", "")
            }

            echo "Query success !!!"
            echo "Data returned " + dataQuery
            jsonQuery =  utilsJsonLib.jsonParse(dataQuery)
            pentestStatus = jsonQuery.Status
            pentestComplianceStatus = jsonQuery.ManualTestComplianceStatus.replaceAll(" ", "_")
            
            echo "Execution analyze data query to score calculation for pentest"
            echo "Pentest status read: " + pentestStatus
            echo "Pentest compliance status read: " + pentestComplianceStatus
            if ( pentestStatus == "Production" ) {
                if ( ( jsonQuery.ManualPenTestStatus != "No Testing Required" ) && ( jsonQuery.ManualFinalTestStatus == "Never Tested" ) ) {
                    echo "Application did not pass in the pentest rules" 
                    toolsScore.pentest.analysis_performed = 'true'
                    toolsScore.pentest.score = 0
                    piaasMainInfo.pentest_analysis_performed = 'true'
                    piaasMainInfo.pentest_score = toolsScore.pentest.score
                    changeorderTestResult = changeorderTestResult +
                                            "**** Pentest - [ Score: " + piaasMainInfo.pentest_score + " ]{/n}"  +
                                            "Status: " + pentestStatus + "{/n}" +
                                            "Compliance Status: " + pentestComplianceStatus + "{/n}{/n}";   
                } else if ( ( jsonQuery.ManualFinalTestStatus == "Compliant" ) && ( jsonQuery.ManualRemediationStatus == "Compliant" ) && ( jsonQuery.ManualStatus == "Passed" ) ) {
                    echo "Application passed in the pentest rules" 
                    toolsScore.pentest.analysis_performed = 'true'
                    toolsScore.pentest.score = 100
                    piaasMainInfo.pentest_analysis_performed = 'true'
                    piaasMainInfo.pentest_score = toolsScore.pentest.score
                    changeorderTestResult = changeorderTestResult +
                                            "**** Pentest - [ Score: " + piaasMainInfo.pentest_score + " ]{/n}"  +
                                            "Status: " + pentestStatus + "{/n}" +
                                            "Compliance Status: " + pentestComplianceStatus + "{/n}{/n}";
                } else if ( ( jsonQuery.ManualFinalTestStatus == "Compliant" ) && ( jsonQuery.ManualRemediationStatus == "Compliant" ) ) {
                    echo "Application passed in the pentest rules" 
                    toolsScore.pentest.analysis_performed = 'true'
                    toolsScore.pentest.score = 100
                    piaasMainInfo.pentest_analysis_performed = 'true'
                    piaasMainInfo.pentest_score = toolsScore.pentest.score
                    changeorderTestResult = changeorderTestResult +
                                            "**** Pentest - [ Score: " + piaasMainInfo.pentest_score + " ]{/n}"  +
                                            "Status: " + pentestStatus + "{/n}" +
                                            "Compliance Status: " + pentestComplianceStatus + "{/n}{/n}";
                } else if ( ( jsonQuery.ManualFinalTestStatus == "Compliant" ) && ( jsonQuery.ManualRemediationStatus == "Overdue" ) ) {
                    echo "Application not passed in the pentest rules" 
                    toolsScore.pentest.analysis_performed = 'true'
                    toolsScore.pentest.score = 50
                    piaasMainInfo.pentest_analysis_performed = 'true'
                    piaasMainInfo.pentest_score = toolsScore.pentest.score
                    changeorderTestResult = changeorderTestResult +
                                            "**** Pentest - [ Score: " + piaasMainInfo.pentest_score + " ]{/n}"  +
                                            "Status: " + pentestStatus + "{/n}" +
                                            "Compliance Status: " + pentestComplianceStatus + "{/n}{/n}";
                } else if ( ( jsonQuery.ManualFinalTestStatus == "Overdue" ) && ( jsonQuery.ManualStatus == "Passed" ) ) {
                    echo "Application not passed in the pentest rules" 
                    toolsScore.pentest.analysis_performed = 'true'
                    toolsScore.pentest.score = 90
                    piaasMainInfo.pentest_analysis_performed = 'true'
                    piaasMainInfo.pentest_score = toolsScore.pentest.score
                    changeorderTestResult = changeorderTestResult +
                                            "**** Pentest - [ Score: " + piaasMainInfo.pentest_score + " ]{/n}"  +
                                            "Status: " + pentestStatus + "{/n}" +
                                            "Compliance Status: " + pentestComplianceStatus + "{/n}{/n}";
                }
            } else {
                echo "Application does not require pentest" 
                toolsScore.remove('pentest')
                piaasMainInfo.pentest_analysis_performed = 'not_necessary'
                piaasMainInfo.pentest_score = 0
            }
        } catch (err) {
            echo "Query error in VMS(10.10.198.92) base pentest, impossible to perform score calculation for pentest"
            println("Error: $err")
            echo "Apply zero for score pentest because query not success"
            toolsScore.pentest.analysis_performed = 'true'
            toolsScore.pentest.score = 0
            piaasMainInfo.pentest_analysis_performed= 'true'
            piaasMainInfo.pentest_score = toolsScore.pentest.score
        }
    } else if ( ( piaasMainInfo.gearr_u_network_type == "INTRANET" ) || ( piaasMainInfo.gearr_u_network_type == "EXTRANET" ) ) {
        echo "The application network type is " + piaasMainInfo.gearr_u_network_type + ", not necessary execution calculated score pentest"
        toolsScore.remove('pentest')
        piaasMainInfo.pentest_analysis_performed= 'not_necessary'
        piaasMainInfo.pentest_score = 0
    } else {
        echo "The application network type not found apply zero for score pentest"
        toolsScore.pentest.analysis_performed = 'true'
        toolsScore.pentest.score = 0
        piaasMainInfo.pentest_analysis_performed= 'true'
        piaasMainInfo.pentest_score = toolsScore.pentest.score
    }

    serviceGovernanceScore.scorePost(piaasMainInfo.pentest_score, "PENTEST", "score-pentest")
}

return this