# Senha randomica
resource "random_password" "master" {
    length  = 15
    special = false
}

# Define as configurações do cluster
resource "aws_docdb_cluster" "this" {
    cluster_identifier = "${var.cluster_name}-${var.env}"
    master_username = var.master_username
    master_password = random_password.master.result
    backup_retention_period = var.retention_period 
    preferred_backup_window = var.preferred_backup_window
    apply_immediately = var.apply_immediately
    storage_encrypted = var.storage_encrypted
    kms_key_id = var.kms_key_id
    snapshot_identifier = var.snapshot_identifier
    skip_final_snapshot = var.skip_final_snapshot
    vpc_security_group_ids = local.security_group_ids
    db_subnet_group_name = join("", aws_docdb_subnet_group.this[*].name)
    db_cluster_parameter_group_name = join("", aws_docdb_cluster_parameter_group.this[*].name)
    engine = var.engine 
    engine_version = var.engine_version
    enabled_cloudwatch_logs_exports = var.enabled_cloudwatch_logs_exports
    tags = local.tags
}

# Define a instancia do cluster
resource "aws_docdb_cluster_instance" "this" {
    count = var.cluster_size
    identifier = "${var.cluster_name}-${var.env}-${count.index + 1}"
    cluster_identifier = join("", aws_docdb_cluster.this.*.id)
    apply_immediately = var.apply_immediately
    instance_class = var.instance_class
    engine = var.engine 
    tags = local.tags

    depends_on = [aws_docdb_cluster.this]
}

# Define as subnets groups para o cluster
resource "aws_docdb_subnet_group" "this" {
    count = local.subnet_group_exists != "exists" ? 1 : 0

    name = "subnet-group-${var.cluster_name}"
    description = "Allowed subnets for DB cluster instance"
    subnet_ids = tolist(data.aws_subnets.available.ids)
    tags = local.tags
}

# Define os paramenters group para o cluster
resource "aws_docdb_cluster_parameter_group" "this" {
    count = local.parameter_group_exists != "exists" ? 1 : 0

    name = "parameter-group-${var.cluster_name}"
    description = "DB Cluster parameter group"
    family = local.cluster_family
    parameter {
        name = "tls"
        value = var.tls_enabled ? "enabled" : "disabled"
    }
    tags = local.tags
}
