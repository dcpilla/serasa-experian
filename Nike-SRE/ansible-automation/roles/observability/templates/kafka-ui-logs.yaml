#kubectl apply -f file_name
#kubectl delete -f file_name
apiVersion: apps/v1
kind: Deployment
metadata:
  name: '{{kafka_ui_name}}'
  namespace: '{{name_spaces}}'
spec:
  replicas: 1
  selector:
    matchLabels:
      app: '{{kafka_ui_name}}'
  template:
    metadata:
      labels:
        app: '{{kafka_ui_name}}'
    spec:
      containers:
        - name: kafka-ui
          image: provectuslabs/kafka-ui:latest
          ports:
            - containerPort: 8080
              protocol: TCP
          env:
            - name: AUTH_TYPE
              value: "LOGIN_FORM"
            - name: SPRING_SECURITY_USER_NAME
              value: "{{UI_USER}}"
            - name: SPRING_SECURITY_USER_PASSWORD
              value: "{{UI_PWD}}"
            - name: KAFKA_CLUSTERS_0_NAME
              value: '{{msk_cluster_name}}'
            - name: KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS
              value: '{{brooker_list}}'
            - name: KAFKA_CLUSTERS_0_PROPERTIES_SECURITY_PROTOCOL
              value: "SSL"
          resources:
            requests:
              memory: 512Mi
          livenessProbe:
            httpGet:
              path: /actuator/health
              port: 8080
              scheme: HTTP
            initialDelaySeconds: 60
            timeoutSeconds: 10
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            tcpSocket:
              port: 8080
            initialDelaySeconds: 30
            timeoutSeconds: 10
            periodSeconds: 10
            successThreshold: 1
            failureThreshold: 3
          imagePullPolicy: Always
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 25%
      maxSurge: 25%
  revisionHistoryLimit: 10
  progressDeadlineSeconds: 600
---
apiVersion: v1
kind: Service
metadata:
  name: '{{kafka_ui_name}}'
  namespace: '{{name_spaces}}'
spec:
  ports:
    - protocol: TCP
      port: 80
      targetPort: 8080
  selector:
    app: '{{kafka_ui_name}}'
  type: ClusterIP
---
apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  name: '{{kafka_ui_name}}-gw'
  namespace: '{{name_spaces}}'
spec:
  selector:
    istio: ingress
  servers:
    - hosts:
        - '{{kafka_ui_name}}.{{domain}}'
      port:
        name: https
        number: 443
        protocol: HTTP
---
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: '{{kafka_ui_name}}-vs'
  namespace: '{{name_spaces}}'
spec:
  gateways:
    - '{{kafka_ui_name}}-gw'
  hosts:
    - '{{kafka_ui_name}}.{{domain}}'
  http:
    - route:
        - destination:
            host: '{{kafka_ui_name}}'
---
